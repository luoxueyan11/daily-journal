# This file is un-used for current implementation. It can be integrated with frontend if necessary.


type User {
	_id: ID!
    name: String!
    email: String!
    password: String!
}

input InputUser {
    name: String!
    email: String!
    password: String
}

type Data {
    _id: ID!
    user: String!
    username: String!
    plans:[Plan]
    completed:[Completed]
    allJournals:[Journal]
    count:Int
}

input InputData {
    user: String!
    username: String!
    plans:[InputPlan]
    completed:[InputCompleted]
    allJournals:[InputJournal]
    count:Int
}

type Plan {
    _id: ID!
    id: Int!
    startTime: String!
    endTime: String!
    description: String!
    checked: Boolean
}

input InputPlan {
    id: Int!
    startTime: String!
    endTime: String!
    description: String!
    checked: Boolean
}

type Completed {
    _id: ID!
    id: Int!
    startTime: String!
    endTime: String!
    description: String!
    checked: Boolean
}

input InputCompleted {
    id: Int!
    startTime: String!
    endTime: String!
    description: String!
    checked: Boolean
}

type Journal {
    id: Int!
    startTime: String!
    endTime: String!
    description: String!
    content: String!
}

input InputJournal {
    id: Int!
    startTime: String!
    endTime: String!
    description: String!
    content: String!
}


type Query {
    getCount:Int!
	listUsers:[User]! 
    listData:[Data]!
}

type Mutation {
	addUser(user: InputUser!): User!
    addData(data: InputData!): Data!
    addOnePlan(email:String!, data:[InputPlan]!):Boolean!
    updatePlan(email:String!, data:[InputPlan]!):Boolean!
    updateCompleted(email:String!, data:[InputCompleted]!):Boolean
}